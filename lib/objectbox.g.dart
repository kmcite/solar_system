// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'domain/loads_repository.dart';
import 'domain/panels_repository.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 5299012311966932906),
    name: 'Panel',
    lastPropertyId: const obx_int.IdUid(2, 8379194086029955296),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8731697372585664273),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8379194086029955296),
        name: 'power',
        type: 8,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 6089392248802560215),
    name: 'Load',
    lastPropertyId: const obx_int.IdUid(4, 280527762323401608),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 9116030788142734171),
        name: 'power',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6949964913484936579),
        name: 'isRunning',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2561072175632404588),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 280527762323401608),
        name: 'id',
        type: 6,
        flags: 1,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(2, 6089392248802560215),
    lastIndexId: const obx_int.IdUid(0, 0),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Panel: obx_int.EntityDefinition<Panel>(
      model: _entities[0],
      toOneRelations: (Panel object) => [],
      toManyRelations: (Panel object) => {},
      getId: (Panel object) => object.id,
      setId: (Panel object, int id) {
        object.id = id;
      },
      objectToFB: (Panel object, fb.Builder fbb) {
        fbb.startTable(3);
        fbb.addInt64(0, object.id);
        fbb.addFloat64(1, object.power);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = Panel()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..power = const fb.Float64Reader().vTableGet(
            buffer,
            rootOffset,
            6,
            0,
          );

        return object;
      },
    ),
    Load: obx_int.EntityDefinition<Load>(
      model: _entities[1],
      toOneRelations: (Load object) => [],
      toManyRelations: (Load object) => {},
      getId: (Load object) => object.id,
      setId: (Load object, int id) {
        object.id = id;
      },
      objectToFB: (Load object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(5);
        fbb.addFloat64(0, object.power);
        fbb.addBool(1, object.isRunning);
        fbb.addOffset(2, nameOffset);
        fbb.addInt64(3, object.id);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = Load()
          ..power = const fb.Float64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..isRunning = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            6,
            false,
          )
          ..name = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 8, '')
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Panel] entity fields to define ObjectBox queries.
class Panel_ {
  /// See [Panel.id].
  static final id = obx.QueryIntegerProperty<Panel>(_entities[0].properties[0]);

  /// See [Panel.power].
  static final power = obx.QueryDoubleProperty<Panel>(
    _entities[0].properties[1],
  );
}

/// [Load] entity fields to define ObjectBox queries.
class Load_ {
  /// See [Load.power].
  static final power = obx.QueryDoubleProperty<Load>(
    _entities[1].properties[0],
  );

  /// See [Load.isRunning].
  static final isRunning = obx.QueryBooleanProperty<Load>(
    _entities[1].properties[1],
  );

  /// See [Load.name].
  static final name = obx.QueryStringProperty<Load>(_entities[1].properties[2]);

  /// See [Load.id].
  static final id = obx.QueryIntegerProperty<Load>(_entities[1].properties[3]);
}
